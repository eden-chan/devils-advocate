import * as t from '@babel/types';
import { DeclarationType } from '.';
interface InvokeNode {
    node: t.Node;
    value: string;
    declarationType: DeclarationType;
    inlineDeclarationId: string;
}
export declare const Invoke: import("./types").AnyParser<import("./utils").GetObjectKeysResult<{
    id: import("./types").AnyParser<{
        node: t.Node;
        value: string;
    }>;
    src: import("./types").AnyParser<InvokeNode>;
    onDone: import("./types").AnyParser<import("./utils").GetObjectKeysResult<{
        target: import("./types").AnyParser<{
            node: t.Node;
            value: string;
        }[]>;
        actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
        cond: import("./types").AnyParser<import("./conds").CondNode | null>;
        description: import("./types").AnyParser<{
            node: t.Node;
            value: string;
        }>;
    }>[]>;
    onError: import("./types").AnyParser<import("./utils").GetObjectKeysResult<{
        target: import("./types").AnyParser<{
            node: t.Node;
            value: string;
        }[]>;
        actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
        cond: import("./types").AnyParser<import("./conds").CondNode | null>;
        description: import("./types").AnyParser<{
            node: t.Node;
            value: string;
        }>;
    }>[]>;
    autoForward: import("./types").AnyParser<{
        value: boolean;
        node: t.BooleanLiteral;
    }>;
    forward: import("./types").AnyParser<{
        value: boolean;
        node: t.BooleanLiteral;
    }>;
}>[]>;
export {};
