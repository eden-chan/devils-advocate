import * as t from '@babel/types';
import { GetParserResult } from './utils';
export type TMachineCallExpression = GetParserResult<typeof MachineCallExpression>;
export declare const ALLOWED_CALL_EXPRESSION_NAMES: string[];
export declare const MachineCallExpression: import("./types").Parser<t.CallExpression, {
    callee: t.MemberExpression;
    calleeName: string;
    definition: import("./stateNode").StateNodeReturn | undefined;
    options: import("./utils").GetObjectKeysResult<{
        actions: import("./types").AnyParser<import("./utils").ObjectOfReturn<import("./actions").ActionNode | {
            node: t.Node;
        }>>;
        services: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        guards: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        delays: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        devTools: import("./types").AnyParser<{
            value: boolean;
            node: t.BooleanLiteral;
        }>;
    }> | undefined;
    isMemberExpression: boolean;
    typeArguments: {
        node: t.TSTypeParameterInstantiation;
        params: ({
            node: t.TSType;
        } | undefined)[];
    } | undefined;
    node: t.CallExpression;
} | {
    callee: t.Identifier;
    calleeName: string;
    definition: import("./stateNode").StateNodeReturn | undefined;
    options: import("./utils").GetObjectKeysResult<{
        actions: import("./types").AnyParser<import("./utils").ObjectOfReturn<import("./actions").ActionNode | {
            node: t.Node;
        }>>;
        services: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        guards: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        delays: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        devTools: import("./types").AnyParser<{
            value: boolean;
            node: t.BooleanLiteral;
        }>;
    }> | undefined;
    isMemberExpression: boolean;
    typeArguments: {
        node: t.TSTypeParameterInstantiation;
        params: ({
            node: t.TSType;
        } | undefined)[];
    } | undefined;
    node: t.CallExpression;
} | undefined>;
