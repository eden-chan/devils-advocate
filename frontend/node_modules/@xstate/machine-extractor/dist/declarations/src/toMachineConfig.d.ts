import { Actions, MachineConfig, TransitionConfigOrTarget } from 'xstate';
import { MaybeArrayOfActions } from './actions';
import { TMachineCallExpression } from './machineCallExpression';
import { MaybeTransitionArray } from './transitions';
import { GetParserResult } from './utils';
export interface ToMachineConfigOptions {
    /**
     * Whether or not to hash inline implementations, which
     * allow for parsing inline implementations as code.
     *
     * @default false
     */
    hashInlineImplementations?: boolean;
    /**
     * Whether to use a static string in place of inline implementations.
     * This makes it easier to compare two different configs with `deepEqual`
     *
     * @default false
     */
    anonymizeInlineImplementations?: boolean;
    /**
     * If true, actions will be extracted as expressions
     */
    stringifyInlineImplementations?: boolean;
    /**
     * Original source code text
     */
    fileContent: string;
}
export declare const toMachineConfig: (result: TMachineCallExpression, opts?: ToMachineConfigOptions) => MachineConfig<any, any, any> | undefined;
export declare const getActionConfig: (astActions: GetParserResult<typeof MaybeArrayOfActions>, opts: ToMachineConfigOptions | undefined) => Actions<any, any>;
export declare const getTransitions: (astTransitions: GetParserResult<typeof MaybeTransitionArray>, opts: ToMachineConfigOptions | undefined) => TransitionConfigOrTarget<any, any>;
