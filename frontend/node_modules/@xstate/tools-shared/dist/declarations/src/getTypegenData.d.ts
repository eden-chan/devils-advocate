import { MachineExtractResult } from '@xstate/machine-extractor';
export interface TypegenData extends ReturnType<typeof getTypegenData> {
}
export declare const getTypegenData: (fileName: string, machineIndex: number, machineResult: MachineExtractResult) => {
    typesNode: {
        range: readonly [{
            readonly line: number;
            readonly column: number;
            readonly index: number;
        }, {
            readonly line: number;
            readonly column: number;
            readonly index: number;
        }];
        value: {
            argument: string;
            qualifier: string;
        } | null;
    };
    data: {
        tsTypesValue: {
            argument: string;
            qualifier: string;
        };
        internalEvents: string[];
        serviceSrcToIdMap: {
            [k: string]: string[];
        };
        missingImplementations: {
            actions: string[];
            delays: string[];
            guards: string[];
            services: string[];
        };
        eventsCausingActions: {
            [k: string]: string[];
        };
        eventsCausingDelays: {
            [k: string]: string[];
        };
        eventsCausingGuards: {
            [k: string]: string[];
        };
        eventsCausingServices: {
            [k: string]: string[];
        };
        stateSchema: import("./introspectMachine").StateSchema;
        tags: string[];
    };
};
